# Server Configuration
PORT=8000
HOST=0.0.0.0

# Uvicorn Worker Configuration
# Number of worker processes (default: 2x CPU cores)
# For Zeabur deployment:
# - Developer Plan (2 vCPU): recommended 4 workers
# - Team Plan (4 vCPU): recommended 8 workers
# - Enterprise: adjust based on allocated vCPUs
UVICORN_WORKERS=8

# ============================================================================
# LLM Provider Configuration (Multi-Provider Support)
# ============================================================================
# The video processor now supports multiple LLM providers with automatic failover:
# - Gemini (Google): Primary provider, cost-effective
# - Grok (xAI): Secondary provider, good quality
# - OpenAI GPT-4o: Backup provider, highest quality
#
# Features:
# - Multiple API keys per provider (automatic rotation to avoid rate limits)
# - Automatic failover: Gemini → Grok → OpenAI
# - Zero-downtime: If one provider fails, automatically switches to next
#
# Configuration Options:
# 1. Single key (backward compatible):
#    GEMINI_API_KEY=key1
#
# 2. Multiple keys (comma-separated, NEW):
#    GEMINI_API_KEYS=key1,key2,key3
#    GROK_API_KEYS=xai-key1,xai-key2
#    OPENAI_API_KEYS=sk-xxx,sk-yyy
#
# 3. Custom provider priority (optional):
#    LLM_PROVIDER_PRIORITY=gemini,grok,openai  # Default order
# ============================================================================

# Gemini (Google) API Keys
# Get keys from: https://aistudio.google.com/app/apikey
GEMINI_API_KEY=your_gemini_api_key_here              # Single key (backward compatible)
# GEMINI_API_KEYS=key1,key2,key3                     # Multiple keys (recommended)

# Grok (xAI) API Keys
# Get keys from: https://console.x.ai/
# GROK_API_KEY=your_grok_api_key_here                # Single key
# GROK_API_KEYS=xai-key1,xai-key2                    # Multiple keys

# OpenAI API Keys
# Get keys from: https://platform.openai.com/api-keys
# OPENAI_API_KEY=your_openai_api_key_here            # Single key
# OPENAI_API_KEYS=sk-xxx,sk-yyy                      # Multiple keys

# Provider Priority (optional)
# Default: gemini,grok,openai (tries Gemini first, then Grok, then OpenAI)
# Uncomment to customize:
# LLM_PROVIDER_PRIORITY=gemini,grok,openai

# FFmpeg Configuration (for frame extraction)
TEMP_DIR=/tmp/recipeai
MAX_VIDEO_SIZE_MB=500

# Frame Extraction Configuration
# Determines how many frames to extract based on video duration
# - 'fast': 8-16 frames (optimized for LINE 55s reply deadline)
#   <5min: 8 frames, 5-10min: 10 frames, 10-15min: 12 frames, >15min: 16 frames
# - 'balanced': 12-36 frames (original default, good quality/cost balance)
#   <5min: 12 frames, 5-10min: 18 frames, 10-15min: 24 frames, >15min: 36 frames
# - 'accurate': 15-48 frames (maximum quality, higher cost)
#   <5min: 15 frames, 5-10min: 24 frames, 10-15min: 36 frames, >15min: 48 frames
EXTRACTION_MODE=balanced

# Cloudflare R2 Configuration (for thumbnail storage)
R2_ACCOUNT_ID=your_r2_account_id
R2_ACCESS_KEY_ID=your_r2_access_key_id
R2_SECRET_ACCESS_KEY=your_r2_secret_access_key
R2_BUCKET_NAME=recipeai-thumbnails
R2_PUBLIC_URL=https://thumbnails.recipeai.com

# Platform Cookies (Instagram, YouTube)
# Platform authentication cookies are automatically loaded from R2 based on video URL:
# - Instagram: https://pub-69fc9d7b005d450285cb0cee6d8c0dd5.r2.dev/thumbnails/www.instagram.com_cookies.txt
# - YouTube:   https://pub-69fc9d7b005d450285cb0cee6d8c0dd5.r2.dev/thumbnails/www.youtube.com_cookies.txt
#
# To setup/update cookies (when expired):
#
# Instagram (update every 1-3 months):
# 1. Extract: yt-dlp --cookies-from-browser chrome --cookies instagram_cookies_only.txt "https://www.instagram.com/"
# 2. Upload: python3 upload_cookies.py
# 3. No service restart needed
#
# YouTube (update every 3-6 months):
# 1. Extract: yt-dlp --cookies-from-browser chrome --cookies youtube_cookies_only.txt "https://www.youtube.com/"
# 2. Upload: python3 upload_youtube_cookies.py
# 3. No service restart needed
#
# IMPORTANT:
# - Instagram: Use a test account, not your personal account
# - YouTube: Can use your personal account (only used for video downloads)
# - Update when you see "rate-limit" or "age-restricted" errors
# - The R2 files are publicly accessible but contain session-specific cookies
# - See INSTAGRAM_COOKIES_SETUP.md and YOUTUBE_COOKIES_SETUP.md for detailed guides

# Observability
LOG_LEVEL=INFO

# CORS Configuration
# Comma-separated list of allowed origins
ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000

# ============================================================================
# Processor Mode Configuration (NEW)
# ============================================================================
# PROCESSOR_MODE: Determines how the video processor operates
# - "passive" (default): Waits for incoming requests from Node.js worker
#   Use this for online/production deployment where requests are pushed to it
#
# - "active": Actively polls backend API for failed jobs and processes them
#   Use this for local backup instances that recover failed online jobs
#
# Active Mode Settings (only used when PROCESSOR_MODE=active):
# - BACKEND_API_URL: Backend API endpoint to poll for failed jobs
#   Example: https://your-production-backend.com (online backend URL)
# - POLL_INTERVAL_MS: Polling interval in milliseconds (default: 60000 = 60 seconds)
#   Recommended: 60000-120000 to avoid overwhelming the backend
#
# Usage Examples:
# Online (production): PROCESSOR_MODE=passive (no BACKEND_API_URL needed)
# Local (backup): PROCESSOR_MODE=active BACKEND_API_URL=https://api.production.com
# ============================================================================
# PROCESSOR_MODE=passive
# BACKEND_API_URL=http://localhost:5174
POLL_INTERVAL_MS=60000
